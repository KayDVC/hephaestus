#!/usr/bin/env python3

import argparse
import logging
import os
import sys
import textwrap

from pathlib import Path

sys.path.append(str(Path(__file__).parents[1]))
from hephaestus._internal.meta import Paths
from hephaestus.io.file import create_directory
from hephaestus.io.logging import get_logger, configure_root_logger
from hephaestus.io.subprocess import run_command, command_successful

# Constants
VERSION = "1.0.0"
LOG_FILE = Path(Paths.LOGS, "GenerateDocumentation.log")

fail = lambda: exit(1)
logger = get_logger(__name__)


def generate_rst_files():
    """Creates ReStructuredText files from source code docstrings."""
    logger.info("Creating ReStructured Text Files.")
    cmd = [
        "sphinx-apidoc",
        str(Paths.LIB),
        "--output-dir",
        str(Path(Paths.SPHINX, "source")),
        "--module-first",  # Generate module documentation before generating submodule docs.
        "--force",  # Overwrite existing rst files.
        "--separate",  # Generate a file for each module
        "--implicit-namespaces",  # Who wants to stick __init__.py everywhere.,
        "--private",  # I have the memory of a goldfish. Include private docs too.
    ]

    run_command(cmd, err="Failed to create ReStructured Text files.")


def generate_html():
    """Creates HTML from ReStructuredText files."""
    logger.info("Creating HTML Files.")

    # Ensure docs folder exists.
    docs_dir = str(create_directory(Paths.DOCS))

    # Make commands to generate HTML. Note, we change the output dir of HTML files.
    cmd_sets = [
        {
            "cmd": ["make", "clean", f"BUILDDIR={docs_dir}"],
            "on_error": "Failed to clean make environment.",
        },
        {
            "cmd": ["make", "html", f"BUILDDIR={docs_dir}"],
            "on_error": "Failed to create html files.",
        },
    ]

    # Change directory to avoid OS-specific login.
    current_dir = Path.cwd()
    os.chdir(Paths.SPHINX)
    logger.debug(f"Current dir: {Path.cwd().resolve()}")

    # Run commands changing back to previous directory on failure.
    for cmd_set in cmd_sets:
        run_command(
            cmd_set["cmd"],
            err=cmd_set["on_error"],
            cleanup=lambda: os.chdir(current_dir),
        )

    os.chdir(current_dir)
    logger.info(f"HTML files available here: {docs_dir}")


def _check_sphinx_installation():
    """Verifies system has Sphinx Installed"""
    logger.debug("Verifying Sphinx Apidoc installation")

    cmd = ["sphinx-apidoc", "--version"]

    if not command_successful(cmd):
        logger.error("Could not find Sphinx Apidoc. Is it installed on this machine?")
        fail()


def run():

    parser = argparse.ArgumentParser(
        prog="Generate Source Documentation",
        description="Generates documentation from source code using Sphinx.",
        usage=textwrap.dedent(
            """
            scripts/generate_documentation
            """
        ),
    )

    parser.add_argument(
        "--disable-color",
        help="Disable colored output to standard out",
        required=False,
        dest="disable_color",
        action="store_true",
    )
    parser.add_argument(
        "-vv",
        "--verbose",
        help="output debug messages",
        required=False,
        dest="verbose",
        action="store_true",
    )
    parser.add_argument(
        "-v",
        "--version",
        help="print the version of the script",
        required=False,
        dest="version",
        action="store_true",
    )

    args = parser.parse_args()

    if args.version:
        print(VERSION)
        exit(0)

    configure_root_logger(
        min_level=logging.DEBUG if args.verbose else logging.INFO,
        log_file=LOG_FILE,
        enable_color=(not args.disable_color),
    )

    _check_sphinx_installation()
    generate_rst_files()
    generate_html()


if __name__ == "__main__":
    run()
